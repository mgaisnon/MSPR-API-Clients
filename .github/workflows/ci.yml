name: CI/CD FastAPI

on:
  push:
    branches: ["**"]
    tags: ["v*"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:
    inputs:
      auto_deploy:
        description: "Déployer après push de l'image ?"
        type: boolean
        default: false

permissions:
  contents: read
  packages: write

env:
  PYTHON_VERSION: "3.12"
  IMAGE_NAME: ${{ github.repository }}
  REGISTRY: docker.io
  DOCKERFILE: ./Dockerfile
  CONTEXT: .

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    continue-on-error: true   # ⚠️ tests unitaires en warning
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      - name: Run unit tests with coverage ≥95%
        run: |
          pytest -m "not integration" \
            --cov=. --cov-report=xml --cov-report=term-missing \
        #--cov-fail-under=95    
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage.xml

  integration-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests]
    continue-on-error: true   # ⚠️ tests d'intégration en warning
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s --health-timeout=5s --health-retries=5
      rabbitmq:
        image: rabbitmq:3-management
        ports: ["5672:5672", "15672:15672"]
        options: >-
          --health-cmd="rabbitmq-diagnostics -q ping"
          --health-interval=10s --health-timeout=5s --health-retries=5
    env:
      DATABASE_URL: postgresql+psycopg://postgres:postgres@localhost:5432/testdb
      RABBITMQ_URL: amqp://guest:guest@localhost:5672/
      API_KEY: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - run: pip install -r requirements.txt pytest psycopg[binary] pika
      - name: Run integration tests
        run: pytest -m integration -q 
        #--maxfail=1

  build-and-push:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
      - uses: docker/build-push-action@v6
        id: build
        with:
          context: ${{ env.CONTEXT }}
          file: ${{ env.DOCKERFILE }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: |
      (github.event_name == 'workflow_dispatch' && inputs.auto_deploy) ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main' && vars.AUTO_DEPLOY == 'true')
    steps:
      - name: Echo deployment
        run: echo "Déploiement optionnel avec l'image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
      # Ici ajoute ton déploiement (kubectl, helm, ou SSH+Docker Compose)
