name: CI/CD FastAPI

on:
  push:
    branches: ["**"]
    tags: ["v*"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:
    inputs:
      auto_deploy:
        description: "D√©ployer apr√®s push de l'image ?"
        type: boolean
        default: false

permissions:
  contents: write
  packages: write
  pull-requests: write
  actions: read
  security-events: write 

env:
  PYTHON_VERSION: "3.12"
  IMAGE_NAME: ${{ github.repository }}
  REGISTRY: ghcr.io
  DOCKERFILE: ./Dockerfile
  CONTEXT: .
  PYTHONPATH: "${{ github.workspace }}"
  DATABASE_URL: "sqlite:///./test.db"
  API_KEY: "secret_key"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  guard-branch:
    name: üîí GitFlow & PR hygiene
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    steps:
      - name: Check branch naming (GitFlow)
        run: |
          BR="${GITHUB_REF_NAME}"
          if [[ "$BR" == "main" || "$BR" == "develop" || "$BR" =~ ^feature/ || "$BR" =~ ^release/ || "$BR" =~ ^hotfix/ ]]; then
            echo "Branch OK ($BR)"
          else
            echo "‚ùå Branch '$BR' non conforme. Utilise main|develop|feature/*|release/*|hotfix/*"
            exit 1
          fi
      - name: Validate PR title (Conventional Commits)
        if: github.event_name == 'pull_request'
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat, fix, chore, ci, docs, style, refactor, perf, test, build, revert
          requireScope: false

  lint:
    name: üßπ Lint & Static analysis
    runs-on: ubuntu-latest
    needs: [guard-branch]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
      - name: Install tooling
        run: |
          pip install --upgrade pip
          pip install ruff==0.7.0 black==24.4.2 mypy==1.10.0 || true
      - name: Ruff (lint)
        run: ruff check .
      - name: Black (format check)
        run: black --check .
      - name: mypy (type check - optionnel)
        run: mypy . || true
      - name: Hadolint (Dockerfile)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ env.DOCKERFILE }}

  unit-tests:
    name: ‚úÖ Unit tests (‚â•95%)
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      - name: Run unit tests with coverage
        run: |
          pytest -m "not integration" \
            --cov=. --cov-report=xml --cov-report=term-missing \
            --cov-fail-under=95
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage.xml

  integration-tests:
    name: üîó Integration tests (non bloquants)
    runs-on: ubuntu-latest
    needs: [unit-tests]
    continue-on-error: true
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s --health-timeout=5s --health-retries=5
      rabbitmq:
        image: rabbitmq:3-management
        ports: ["5672:5672", "15672:15672"]
        options: >-
          --health-cmd="rabbitmq-diagnostics -q ping"
          --health-interval=10s --health-timeout=5s --health-retries=5
    env:
      DATABASE_URL: postgresql+psycopg://postgres:postgres@localhost:5432/testdb
      RABBITMQ_URL: amqp://guest:guest@localhost:5672/
      API_KEY: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - run: pip install -r requirements.txt pytest psycopg[binary] pika
      - name: Run integration tests
        run: pytest -m integration -q --maxfail=1 || true

  build-image:
    name: üèóÔ∏è Build Docker image
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}          
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
      - uses: docker/build-push-action@v6
        id: build
        with:
          context: ${{ env.CONTEXT }}
          file: ${{ env.DOCKERFILE }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  security-scan:
    name: üîç Trivy scan (FS & image)
    runs-on: ubuntu-latest
    needs: [build-image]
    steps:
      - uses: actions/checkout@v4
      - uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: "fs"
          ignore-unfixed: true
          format: "table"
          severity: "CRITICAL,HIGH"
      - name: Scan built image
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          ignore-unfixed: true
          format: "table"
          severity: "CRITICAL,HIGH"

  release-please:
    name: üè∑Ô∏è Release & Versioning (Conventional Commits)
    runs-on: ubuntu-latest
    # On ne release que depuis main (ou manuellement)
    if: github.ref == 'refs/heads/main'
    needs: [security-scan]
    steps:
      - uses: google-github-actions/release-please-action@v4
        id: release
        with:
          release-type: simple
          package-name: ${{ github.event.repository.name }}
          bump-minor-pre-major: true
          changelog-types: |
            [
              {"type":"feat","section":"Features","hidden":false},
              {"type":"fix","section":"Bug Fixes","hidden":false},
              {"type":"perf","section":"Performance","hidden":false},
              {"type":"refactor","section":"Refactoring","hidden":false},
              {"type":"docs","section":"Documentation","hidden":false},
              {"type":"build","section":"Build System","hidden":false},
              {"type":"ci","section":"CI/CD","hidden":false},
              {"type":"test","section":"Tests","hidden":false},
              {"type":"chore","section":"Chores","hidden":false}
            ]
      - name: Echo created release
        if: steps.release.outputs.release_created == 'true'
        run: |
          echo "New release: ${{ steps.release.outputs.tag_name }}"
          echo "Changelog updated."

  build-and-push:
    name: üöÄ Push image (main/tags)
    runs-on: ubuntu-latest
    needs: [release-please]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
      - uses: docker/build-push-action@v6
        with:
          context: ${{ env.CONTEXT }}
          file: ${{ env.DOCKERFILE }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: üì¶ Deploy (optionnel)
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: |
      (github.event_name == 'workflow_dispatch' && inputs.auto_deploy) ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main' && vars.AUTO_DEPLOY == 'true')
    steps:
      - name: Echo deployment
        run: echo "D√©ploiement optionnel avec l'image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
      # üëâ Ajoute ici kubectl/helm/ssh+docker compose selon ton infra
