name: CI/CD FastAPI

on:
  push:
    branches: ["**"]
    tags: ["v*"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:
    inputs:
      auto_deploy:
        description: "D√©ployer apr√®s push de l'image ?"
        type: boolean
        default: false
      target_repo:
        description: "Repo infra (owner/name)"
        required: true
        default: "mgaisnon/MSPR-API-INFRA"
      target_branch:
        description: "Branche infra"
        required: true
        default: "main"
      target_file:
        description: "Fichier √† modifier (compose/k8s)"
        required: true
        default: "docker-compose.yml"
      image_field_regex:
        description: "Regex de la ligne image:"
        required: true
        default: "^\\s*image:\\s*.+$"
      fork_owner:
        description: "Ton compte GitHub (pour fork)"
        required: true
        default: "mgaisnon"

permissions:
  contents: write
  packages: write
  pull-requests: write
  actions: read
  security-events: write

env:
  PYTHON_VERSION: "3.12"
  REGISTRY: ghcr.io
  DOCKERFILE: ./Dockerfile
  CONTEXT: .
  PYTHONPATH: "${{ github.workspace }}"
  DATABASE_URL: "postgresql://clientuser:clientpass@db-clients:5432/clientsdb"
  API_KEY: "secret_key"
  FLY_API_TOKEN: "fm2_lJPECAAAAAAACfFZxBAS3nWWcbdLGvzdSJYgbOCbwrVodHRwczovL2FwaS5mbHkuaW8vdjGUAJLOABMryx8Lk7lodHRwczovL2FwaS5mbHkuaW8vYWFhL3YxxDzKPld+9Ad7zBPrheJ6dmoKZX7cga3FjtEmOHj7uB/w0d1PWdwWFotzRKzOCvD78mntt5K3a76pXtODeb/ETlhE2pfl/+dZ8Ek30mJY/wuRqdb46tO+zBTo2orlESwNOPBzVkfu3e29PptNzJC3TjM6UQ7s7p26KDhAbfm/KhmUmi/ZkrwWBjp3MU3RX8QgRPmz/h/ZKL4N2ofU0WxITKntm5+wn3BLgySGcu6XSQ0=,fm2_lJPETlhE2pfl/+dZ8Ek30mJY/wuRqdb46tO+zBTo2orlESwNOPBzVkfu3e29PptNzJC3TjM6UQ7s7p26KDhAbfm/KhmUmi/ZkrwWBjp3MU3RX8QQl/cd45J/4WOJqEQXecAKtMO5aHR0cHM6Ly9hcGkuZmx5LmlvL2FhYS92MZYEks5otdJczmi11NIXzgASbNgKkc4AEmzYxCACfpgnnAcw1e+0JSiF4ZvwY6mSjrbrAwkdZTNXTVxjmw==,fo1_LXtRSvXqZXxA2-AGlRSW47qOCXiUZsLaxKrUp-pPnmU"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare:
    name: üß≠ Prepare (image name)
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.norm.outputs.image_name }}
    steps:
      - id: norm
        shell: bash
        run: |
          IMAGE_NAME="$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')"
          echo "image_name=$IMAGE_NAME" >> "$GITHUB_OUTPUT"

  guard-branch:
    name: üîí GitFlow & PR hygiene
    runs-on: ubuntu-latest
    needs: [prepare]
    if: github.event_name != 'workflow_dispatch'
    steps:
      - name: Check branch naming (GitFlow + Merge Queue)
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${BRANCH_GUARD:-on}" == "off" ]]; then
            echo "Branch guard disabled (BRANCH_GUARD=off)"; exit 0
          fi
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "Tag build (${GITHUB_REF_NAME}) - skipping branch guard"; exit 0
          fi
          BR="${GITHUB_REF_NAME}"
          if [[ "$BR" =~ ^(main|develop)$ \
            || "$BR" =~ ^(feature|release|hotfix)\/.+$ \
            || "$BR" =~ ^dependabot\/.+$ \
            || "$BR" =~ ^renovate\/.+$ \
            || "$BR" =~ ^gh-readonly-queue\/.+$ \
            || "$BR" =~ ^[0-9]+\/merge$ ]]; then
            echo "Branch OK ($BR)"
            exit 0
          fi
          printf '%s\n' "‚ùå Branch '$BR' non conforme." \
                        "Attendus: main|develop|feature/*|release/*|hotfix/*|dependabot/*|renovate/*|gh-readonly-queue/*|<number>/merge"
          exit 1

      - name: Validate PR title (Conventional Commits)
        if: github.event_name == 'pull_request'
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            chore
            ci
            docs
            style
            refactor
            perf
            test
            build
            revert
          requireScope: false

  lint:
    name: üßπ Lint & Static analysis
    runs-on: ubuntu-latest
    needs: [prepare]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
      - name: Install tooling
        run: |
          pip install --upgrade pip
          pip install ruff==0.7.0 black==24.4.2 mypy==1.10.0 || true
      - name: Ruff (lint)
        run: ruff check .
      - name: Black (auto-fix)
        run: black .
      - name: Black (format check)
        run: black --check .
      - name: mypy (type check - optionnel)
        run: mypy . || true
      - name: Hadolint (Dockerfile)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ env.DOCKERFILE }}

  unit-tests:
    name: ‚úÖ Unit tests (‚â•95%)
    runs-on: ubuntu-latest
    needs: [lint]
    env:
      TESTING: "1"
      DATABASE_URL: "sqlite:///./test.db"             # ceinture et bretelles
      SQLALCHEMY_DATABASE_URL: "sqlite:///./test.db"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      - name: Run unit tests with coverage
        run: |
          pytest -m "not integration" \
            --cov=. --cov-report=xml --cov-report=term-missing \
            --cov-fail-under=95
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage.xml

  integration-tests:
    name: üîó Integration tests (non bloquants)
    runs-on: ubuntu-latest
    needs: [unit-tests]
    continue-on-error: true
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s --health-timeout=5s --health-retries=5
      rabbitmq:
        image: rabbitmq:3-management
        ports: ["5672:5672", "15672:15672"]
        options: >-
          --health-cmd="rabbitmq-diagnostics -q ping"
          --health-interval=10s --health-timeout=5s --health-retries=5
    env:
      DATABASE_URL: postgresql+psycopg://postgres:postgres@localhost:5432/testdb
      RABBITMQ_URL: amqp://guest:guest@localhost:5672/
      API_KEY: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - run: pip install -r requirements.txt pytest psycopg[binary] pika
      - name: Run integration tests
        run: pytest -m integration -q --maxfail=1 || true

  build-image:
    name: üèóÔ∏è Build Docker image
    runs-on: ubuntu-latest
    needs: [prepare, unit-tests, integration-tests]
    env:
      IMAGE_NAME: ${{ needs.prepare.outputs.image_name }}
    outputs:
      image_ref: ${{ steps.out.outputs.image_ref }}
      pushed: ${{ steps.out.outputs.pushed }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        if: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha

      - name: Build & PUSH (main/tags)
        id: build-push
        if: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.CONTEXT }}
          file: ${{ env.DOCKERFILE }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: |
            type=gha,mode=max
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: Build & LOAD (PR/branches)
        id: build-load
        if: ${{ !(github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))) }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.CONTEXT }}
          file: ${{ env.DOCKERFILE }}
          load: true
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha
          cache-to: |
            type=gha,mode=max

      - name: Show local images (debug)
        if: steps.build-load.outcome == 'success'
        run: docker images --no-trunc | head -n 50

      - name: Save local image as artifact
        if: steps.build-load.outcome == 'success'
        shell: bash
        run: |
          set -euo pipefail
          FIRST_TAG="$(echo "${{ steps.meta.outputs.tags }}" | head -n1)"
          mkdir -p /tmp/trivy
          docker save -o /tmp/trivy/image.tar "$FIRST_TAG"

      - name: Upload image artifact
        if: steps.build-load.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image
          path: /tmp/trivy/image.tar
          if-no-files-found: error

      - name: Export image ref / pushed flag (with local fallback)
        id: out
        shell: bash
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: |
          set -euo pipefail
          FIRST_TAG="$(echo "${{ steps.meta.outputs.tags }}" | head -n1)"
          if [[ "${{ steps.build-push.outcome }}" == "success" ]]; then
            echo "pushed=true" >> "$GITHUB_OUTPUT"
            echo "image_ref=$FIRST_TAG" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          if docker image inspect "$FIRST_TAG" >/dev/null 2>&1; then
            echo "pushed=false" >> "$GITHUB_OUTPUT"
            echo "image_ref=$FIRST_TAG" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          IMAGE_ID="${{ steps.build-load.outputs.imageid }}"
          if [[ -z "${IMAGE_ID}" ]]; then
            echo "‚ùå IMAGE_ID introuvable, impossible de taguer localement."
            exit 1
          fi
          REPO="${IMAGE_NAME##*/}"
          SHORT_SHA="${GITHUB_SHA:0:7}"
          LOCAL_TAG="local/${REPO}:sha-${SHORT_SHA}"
          echo "Re-tagging ${IMAGE_ID} as ${LOCAL_TAG}"
          docker tag "${IMAGE_ID}" "${LOCAL_TAG}"
          echo "pushed=false" >> "$GITHUB_OUTPUT"
          echo "image_ref=$LOCAL_TAG" >> "$GITHUB_OUTPUT"

  security-scan:
    name: üîç Trivy scan (FS & image)
    runs-on: ubuntu-latest
    needs: [prepare, build-image]
    env:
      IMAGE_NAME: ${{ needs.prepare.outputs.image_name }}
    steps:
      - uses: actions/checkout@v4

      - uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: "fs"
          ignore-unfixed: true
          format: "table"
          severity: "CRITICAL,HIGH"

      - name: Download image artifact
        if: needs.build-image.outputs.pushed != 'true'
        uses: actions/download-artifact@v4
        with:
          name: trivy-image
          path: /tmp/trivy

      - name: Docker load artifact (PR/branches)
        if: needs.build-image.outputs.pushed != 'true'
        run: docker load -i /tmp/trivy/image.tar

      - name: Login GHCR (for registry scan)
        if: needs.build-image.outputs.pushed == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Scan image (registry or local)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ needs.build-image.outputs.image_ref }}
          ignore-unfixed: true
          format: "table"
          severity: "CRITICAL,HIGH"

  build-and-push:
    name: üöÄ Push image (main/tags)
    runs-on: ubuntu-latest
    needs: [prepare, security-scan]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    env:
      IMAGE_NAME: ${{ needs.prepare.outputs.image_name }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
      - uses: docker/build-push-action@v6
        with:
          context: ${{ env.CONTEXT }}
          file: ${{ env.DOCKERFILE }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-fly:
    name: üöÄ Deploy to Fly.io
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, build-image, security-scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ env.FLY_API_TOKEN }}
